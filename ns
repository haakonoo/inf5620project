#!/usr/bin/env python
# coding: latin1

__author__ = "Anders Logg <logg@simula.no>"
__date__ = "2008-04-11"
__copyright__ = "Copyright (C) 2008-2010 " + __author__
__license__  = "GNU GPL version 3 or any later version"

#Modified by Håkon Østerbø

import sys, time
from dolfin import set_log_active, parameters, list_timings

from problems import Problem, problems
from solvers import Solver, solvers

# Default options
OPTIONS = {"N": 4,
           "dt": 0.1,
           "save_solution": False,
           "save_frequency": 1,
           "check_frequency": 10,
           "save_solution_at_t=T": False,
           "save_xml": False,
           "compute_stress": False,
           "compute_divergence": False,
           "compute_POD": 0,
           "compare_POD": 0,
           "save_POD": False,
           "krylov_solver_absolute_tolerance": 1e-25,
           "krylov_solver_relative_tolerance": 1e-12,
           "krylov_solver_monitor_convergence": False}

def usage():
    "Print usage"
    print """\
Usage: ns problem solver

Available problems:

%s

Available solvers:

%s
""" % ("\n".join("  " + p for p in problems),
       "\n".join("  " + s for s in solvers))

def main(args):
    "Parse command-line arguments and run solver"

    # Check arguments
    if not len(args) >= 2:
        usage()
        return 2

    # Get problem and solver
    problem_name, solver_name = args[:2]

    # Get options
    options = OPTIONS.copy()
    for arg in args[2:]:
        try:
            key, value = arg.split("=")
            try:
                options[key] = eval(value)
            except:
                options[key] = str(value)
        except:
            print "Warning: Unhandled command-line argument", arg

    # Set global DOLFIN parameters
    parameters["form_compiler"]["cpp_optimize"] = True
    parameters["krylov_solver"]["absolute_tolerance"] = options["krylov_solver_absolute_tolerance"]
    parameters["krylov_solver"]["relative_tolerance"] = options["krylov_solver_relative_tolerance"]
    parameters["krylov_solver"]["monitor_convergence"] = options["krylov_solver_monitor_convergence"]

    # Create problem and solver
    problem = Problem(problem_name, options)
    solver = Solver(solver_name, options)
    print "Problem: " + str(problem)
    print "Solver:  " + str(solver)

    # Make sure velocity is stored for POD computations
    if options["compare_POD"] or options["compute_POD"] > 0 or options["save_POD"]>0:
        options["store_u"] = True
    else:
        options["store_u"] = False

    # Solve problem with solver
    wct = time.time()
    u, p = solver.solve(problem)

    # Compute elapsed time
    wct = time.time() - wct

    # Compute POD
    if options["compute_POD"] > 0:
        podtime = time.time()
        solver.compute_POD(options["compute_POD"])
        podtime = time.time() - podtime
        print "Pod order compute time: ", podtime

    if options["save_POD"] > 0:
        podtime = time.time()
        solver.write_POD_velocity_to_file(problem, options["save_POD"])
        podtime = time.time() - podtime
        print "Pod order compute time: ", podtime

    # Write error to file
    error = solver.meanerror()
    if error != None:
        f = open("error.log","a")
        s = "dt=%g N=%d error=%g\n" %(options['dt'], options['N'],error)
        f.write(s)
        f.close()
        print s

    if options["compare_POD"]:
        E = solver.POD_error_analysis()
        f = open("POD_error.txt","w")
        s = "\n".join(str(e) for e in E)
        f.write(s)
        f.close()

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
